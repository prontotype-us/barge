// Generated by CoffeeScript 2.3.2
var Activator, EventEmitter, debug;

EventEmitter = require('events');

debug = require('debug')('somata:activator');

// Activator
// An object that can be used to wait for some function to complete
// ------------------------------------------------------------------------------

// Params:
// * activate: () -> Promise
//   The function that will be called to begin the activation process, which
//   should return a Promise that will resolve when activation is done.

// Methods:
// * isActive: () -> Promise
//   Begins activation and blocks until activated, or if already activated
//   passes straight through.
module.exports = Activator = class Activator {
  constructor(activate) {
    this.activate = activate;
    this.emitter = new EventEmitter;
    this.is_activating = false;
    this.is_activated = false;
  }

  async startActivation() {
    var err;
    debug('[startActivation]');
    this.is_activating = true;
    try {
      await this.activate();
      return this.onActivated();
    } catch (error) {
      err = error;
      return this.emitter.emit('error', err);
    }
  }

  deactivate() {
    this.is_activating = false;
    return this.is_activated = false;
  }

  onActivated() {
    debug('[onActivated]');
    this.emitter.emit('active');
    return this.is_activated = true;
  }

  activePromise() {
    return new Promise((resolve, reject) => {
      this.emitter.on('active', resolve);
      return this.emitter.on('error', reject);
    });
  }

  // Returns a promise that "blocks" until activated, starting activation if 
  // not already in progress, or continue right through if already activated
  async isActive() {
    if (!this.is_activated) {
      if (!this.is_activating) {
        this.startActivation();
      }
      return (await this.activePromise());
    }
  }

};
