// Generated by CoffeeScript 2.4.1
var Client, MultiClient, helpers,
  splice = [].splice;

Client = require('./client');

helpers = require('./helpers');

// TODO: Should the base Client class be more one-off oriented? It's a tradeoff
// between being able to connect one client to many services (as in the case of
// super-api or anything that needs arbitrary connections) vs. having to write
// the extra remote.bind(@, ...) which seems clumsy most of the time. There is
// also the extra logic that has to be built into a client if it connects to many
// services and has to manage disconnects, subscriptions, etc. Is the one to many
// use case not significant enough to bother?

// TODO: Cache connections instead of creating a new Client every time
module.exports = MultiClient = class MultiClient {
  constructor() {}

  request(service, method, ...args) {
    return new Client(service).request(method, ...args);
  }

  requestCb(service, method, ...args) {
    var cb, ref;
    ref = args, [...args] = ref, [cb] = splice.call(args, -1);
    return helpers.fromPromise(this.request.bind(this, service, method, ...args), cb);
  }

};
