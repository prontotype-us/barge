// Generated by CoffeeScript 1.12.4
var EventEmitter, Subscription, VERBOSE, helpers, log,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

EventEmitter = require('events').EventEmitter;

helpers = require('./helpers');

log = helpers.log;

VERBOSE = parseInt(process.env.SOMATA_VERBOSE || 0);

Subscription = (function(superClass) {
  extend(Subscription, superClass);

  function Subscription(options) {
    if (options == null) {
      options = {};
    }
    Object.assign(this, options);
    this.id || (this.id = this.type + '~' + helpers.randomString());
    this.handleEvent = this._handleEvent.bind(this);
  }

  Subscription.prototype._handleEvent = function(message) {
    if (VERBOSE > 2) {
      log.d('[Subscription.handleEvent]', arguments);
    }
    return this.emit(this.type, message);
  };

  Subscription.prototype.subscribe = function(connection) {
    this.connection = connection;
    log.i("[Subscription.subscribe] " + this.id + " <" + this.connection.id + ">");
    this.connection.sendSubscribe(this.id, this.service, this.type, this.args, this.handleEvent);
    this.resubscribe = this._resubscribe.bind(this);
    return this.connection.on('reconnect', this.resubscribe);
  };

  Subscription.prototype._resubscribe = function() {
    if (VERBOSE) {
      log.i("[Subscription.resubscribe] " + this.id + " <" + this.connection.id + ">");
    }
    return this.connection.sendSubscribe(this.id, this.service, this.type, this.args, this.handleEvent);
  };

  Subscription.prototype.unsubscribe = function() {
    if (VERBOSE) {
      log.w("[Subscription.unsubscribe] <" + this.connection.id + "> " + this.id);
    }
    delete this.connection.pending_responses[this.id];
    this.connection.removeListener('reconnect', this.resubscribe);
    return this.connection.sendUnsubscribe(this.id, this.type);
  };

  return Subscription;

})(EventEmitter);

module.exports = Subscription;
