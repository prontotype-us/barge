// Generated by CoffeeScript 2.0.0-beta4
var EventEmitter, Subscription, VERBOSE, helpers, log;

({EventEmitter} = require('events'));

helpers = require('./helpers');

({log} = helpers);

VERBOSE = parseInt(process.env.SOMATA_VERBOSE || 0);

Subscription = class Subscription extends EventEmitter {
  constructor(options = {}) {
    super();
    Object.assign(this, options);
    this.id || (this.id = this.type + '~' + helpers.randomString());
    this.handleEvent = this._handleEvent.bind(this);
  }

  _handleEvent(message) {
    if (VERBOSE > 2) {
      log.d('[Subscription.handleEvent]', arguments);
    }
    return this.emit(this.type, message);
  }

  subscribe(connection) {
    this.connection = connection;
    log.i(`[Subscription.subscribe] ${this.id} <${this.connection.id}>`);
    this.connection.sendSubscribe(this.id, this.service, this.type, this.args, this.handleEvent);
    this.resubscribe = this._resubscribe.bind(this);
    return this.connection.on('reconnect', this.resubscribe);
  }

  _resubscribe() {
    if (VERBOSE) {
      log.i(`[Subscription.resubscribe] ${this.id} <${this.connection.id}>`);
    }
    return this.connection.sendSubscribe(this.id, this.service, this.type, this.args, this.handleEvent);
  }

  unsubscribe() {
    if (VERBOSE) {
      log.w(`[Subscription.unsubscribe] <${this.connection.id}> ${this.id}`);
    }
    delete this.connection.pending_responses[this.id];
    this.connection.removeListener('reconnect', this.resubscribe);
    return this.connection.sendUnsubscribe(this.id, this.type);
  }

};

module.exports = Subscription;
